from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text

from app.config import BUTTON_NEW_TEXT
from app.handlers.tools import (make_question_from_voice,
                                send_answer_to_question)
from app.keyboards.reply import kb_new


async def voice_message_handler(message: types.Message, state: FSMContext):
    """
    This handler will be called when user sends voice message
    """
    await message.answer("–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ. –ß–µ–∫–∞—é –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ —Å–µ—Ä–≤–µ—Ä–∞...")
    question = await make_question_from_voice(message)
    await message.answer(f"‚ùì<b>–í–∞—à –∑–∞–ø–∏—Ç:</b>\n\n{question}")
    await send_answer_to_question(message, state, question, kb_new)


async def send_welcome(message: types.Message, state: FSMContext):
    """
    This handler will be called when user sends `/start` or `/help` command
    """
    message_text = ('‚úåÔ∏è –ü—Ä–∏–≤—ñ—Ç!\n\n–Ø - –º–æ–≤–Ω–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç —ñ –≥–æ—Ç–æ–≤–∏–π –¥–æ '
                    '—Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ —Ç–æ–±–æ—é.\n–Ø –∑–¥–∞—Ç–Ω–∏–π –∑—Ä–æ–∑—É–º—ñ—Ç–∏ —è–∫ '
                    '—Ç–µ–∫—Å—Ç–æ–≤—ñ, —Ç–∞–∫ —ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n\n'
                    '–†–æ–∑–ø–æ—á–Ω–µ–º–æ –Ω–∞—à—É –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É?')
    await state.finish()
    await message.answer(text=message_text,
                         reply_markup=kb_new)


async def start_new_conversation_handler(message: types.Message, state: FSMContext):
    await state.finish()
    message_text = ('üëå –ì–æ—Ç–æ–≤–∏–π –¥–æ –Ω–æ–≤–æ—ó –±–µ—Å—ñ–¥–∏!\n\n'
                    '‚ÑπÔ∏è –ù–∞–≥–∞–¥—É—é, —â–æ —è –º–æ–∂—É —Ä–æ–∑—É–º—ñ—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç–æ–≤—ñ, '
                    '—Ç–∞–∫ —ñ –≥–æ–ª–æ—Å–æ–≤—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.')
    await message.answer(
        text=message_text,
        reply_markup=kb_new
    )


async def text_message_handler(message: types.Message, state: FSMContext):
    """
    This handler will be called when user sends text message
    """
    await send_answer_to_question(message, state, message.text, kb_new)


def register_all_handlers(dp: Dispatcher) -> None:
    dp.register_message_handler(voice_message_handler,
                                content_types=[types.ContentType.VOICE])
    dp.register_message_handler(send_welcome,
                                commands=['start', 'help'])
    dp.register_message_handler(start_new_conversation_handler,
                                commands=['new'])
    dp.register_message_handler(start_new_conversation_handler,
                                Text(equals=BUTTON_NEW_TEXT))
    dp.register_message_handler(text_message_handler)
